<?php

namespace Enmash\Bundle\StoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreRepository extends EntityRepository {

    public function getOnlyOneTypeOfStores($type) {

        $query = $this
            ->getEntityManager()
            ->getRepository('EnmashStoreBundle:Store')
            ->createQueryBuilder('s')
            ->select('s')
            ->where('s.publish = true')
            ->orderBy('s.position')
            ->getQuery();

        $stores = $query->getResult();
        if (!$type) {
            return $stores;
        }

        $filteredStores = array();

        if (!is_array($type)) {
            $type = array($type);
        }

        foreach ($stores as $store) {
            if (count(array_intersect($store->getStoreType(), $type)) > 0) {
                $filteredStores[] = $store;
            }
        }

        return $filteredStores;

    }

    public function getCitySortedStores() {
        $cities = $this
            ->createQueryBuilder('s')
            ->select('DISTINCT s.city')
            ->where('s.publish = true')
            ->getQuery()
            ->getResult();

        $sortedStores = array();

        foreach ($cities as $city) {
            $city = $city['city'];
            $stores = $this
                ->createQueryBuilder('s')
                ->where('s.publish = true')
                ->andWhere('s.city = :city')
                ->setParameters(
                    array(
                        'city'  => $city
                    )
                )
                ->getQuery()
                ->getResult();
            $sortedStores[$city] = $stores;
        }

        return $sortedStores;

    }

}
